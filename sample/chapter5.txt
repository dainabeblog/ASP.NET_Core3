
リスト5-1
@page
@model SampleRazorApp.Pages.FindModel;


@{
    ViewData["Title"] = "Find";
}


<h1>Find</h1>


<form asp-page="Find">
    <div class="row">
        <input type="text" name="find" class="col-10 form-control" />
        <input type="submit" value="Find" class="col-2 btn btn-primary" />
    </div>
</form>


<table class="table mt-5">
    <thead>
        <tr>
            <th>PersonId</th>
            <th>Name</th>
            <th>Mail</th>
            <th>Age</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.People)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.PersonId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Mail)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Age)
                </td>
            </tr>
        }
    </tbody>
</table>




リスト5-2
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using SampleRazorApp.Models;


namespace SampleRazorApp.Pages
{
    public class FindModel : PageModel
    {
        private readonly SampleRazorAppContext _context;
        public IList<Person> People { get; set; }


        public FindModel(SampleRazorAppContext context)
        {
            _context = context;
        }


        public async Task OnGetAsync()
        {
            People = await _context.Person.ToListAsync();
        }


        public async Task OnPostAsync(string Find)
        {
            People = await _context.Person.Where(m => m.Name == Find).ToListAsync();
        }
    }
}




リスト5-3
public async Task<IActionResult> Find()
{
    return View(await _context.Person.ToListAsync());
}


[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Find(string find)
{
    var People  = await _context.Person.Where(m => m.Name == find).ToListAsync();
    return View(People);
}




リスト5-4――FindModel（Razor）
public async Task OnPostAsync(string Find)
{
    int n = Int32.Parse(Find);
    People = await _context.Person.Where(m => m.Age <= n).ToListAsync();
}




リスト5-5――PeopleController（MVC）
[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Find(string find)
{
    int n = Int32.Parse(Find);
    var People  = await _context.Person.Where(m => m.Age <= n).ToListAsync();
    return View(People);
}




リスト5-6
People = await _context.Person.Where(m => m.Age >= n - 5 && m.Age <= n + 5).ToListAsync();




リスト5-7
People = await _context.Person.Where(m => m.Name.EndsWith(Fnd)).ToListAsync();




リスト5-8
People = await _context.Person.Where(m => m.Name.Contains(Find) || 
        m.Mail.Contains(Find)).ToListAsync();




リスト5-9
string[] arr = Find.Split(" ");
People = await _context.Person.Where(m => arr.Contains(m.Name)).ToListAsync();




リスト5-10――Findページに記述（Razor Pageアプリ）
public async Task OnGetAsync()
{
    IQueryable<Person> result = from p in _context.Person select p;
    People = await result.ToListAsync();
}


public async Task OnPostAsync(string Find)
{
    IQueryable<Person> result = from p in _context.Person where p.Name == Find select p;
    People = await result.ToListAsync();
}




リスト5-11――PeopleControllerに記述（MVCアプリ）
public async Task<IActionResult> Find()
{
    IQueryable<Person> result = from p in _context.Person select p;
    return View(await result.ToListAsync());
}


[HttpPost]
[ValidateAntiForgeryToken]
public async Task<IActionResult> Find(string find)
{
    IQueryable<Person> result = from p in _context.Person where p.Name == Find select p;
    return View(await result.ToListAsync());
}




リスト5-12
People = await (from p in _context.Person select p).ToListAsync();




リスト5-13
public string[] Pdata { get; set; }


public async Task OnGetAsync()
{
    Pdata = await _context.Person.Select(m => m.Name).ToArrayAsync();
    People = await _context.Person.ToListAsync();
}




リスト5-14
<pre class="h5">
@string.Join(",", Model.Pdata)
</pre>




リスト5-15
public async Task OnGetAsync()
{
    People = await _context.Person
        .OrderBy(m => m.Age).ToListAsync();
}


public async Task OnPostAsync(string Find)
{
    People = await _context.Person
        .Where(m => m.Name.Contains(Find))
        .OrderBy(m => m.Age).ToListAsync();
}




リスト5-16
[BindProperty(SupportsGet = true)]
public int p { get; set; }
[BindProperty(SupportsGet = true)]
public int n { get; set; }


public async Task OnGetAsync()
{
    n = n <= 0 ? 3 : n;
    People = await _context.Person.OrderBy(m => m.Age)
        .Skip(p * n).Take(n).ToListAsync();
}




リスト5-17
public async Task OnGetAsync()
{
    IQueryable<Person> result = _context.Person
        .FromSqlRaw("select * from person order by PersonId desc");
    People = await result.ToListAsync();
}




リスト5-18
// using System.ComponentModel.DataAnnotations;


public class Person
{
    public int PersonId { get; set; }
    [Required]
    public string Name { get; set; }
    [EmailAddressAttribute]
    public string Mail { get; set; }
    [Range(0,200)]
    public int Age { get; set; }
}




リスト5-19
public async Task<IActionResult> OnPostAsync()
{
    if (!ModelState.IsValid)
    {
        return Page();
    }


    _context.Person.Add(Person);
    await _context.SaveChangesAsync();


    return RedirectToPage("./Index");
}




リスト5-20
[BindProperty]
public Person Person { get; set; }




リスト5-21
<form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Person.Name" class="control-label"></label>
        <input asp-for="Person.Name" class="form-control" />
        <span asp-validation-for="Person.Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Person.Mail" class="control-label"></label>
        <input asp-for="Person.Mail" class="form-control" />
        <span asp-validation-for="Person.Mail" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Person.Age" class="control-label"></label>
        <input asp-for="Person.Age" class="form-control" />
        <span asp-validation-for="Person.Age" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>




リスト5-22
<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Person.Name" class="control-label"></label>
        <input asp-for="Person.Name" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Person.Mail" class="control-label"></label>
        <input asp-for="Person.Mail" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="Person.Age" class="control-label"></label>
        <input asp-for="Person.Age" class="form-control" />
    </div>
    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>




リスト5-23
public class Person
{
    public int PersonId { get; set; }


    [Display(Name="名前")]
    [Required]
    public string Name { get; set; }
    [Display(Name="メールアドレス")]
    [EmailAddress]
    public string Mail { get; set; }
    [Display(Name="年齢")]
    [Range(0,200)]
    public int Age { get; set; }
}




リスト5-24
public class Person
{
    public int PersonId { get; set; }
    [Display(Name="名前")]
    [Required(ErrorMessage = "必須項目です。")]
    public string Name { get; set; }
    [Display(Name="メールアドレス")]
    [EmailAddress(ErrorMessage = "メールアドレスが必要です。")]
    public string Mail { get; set; }
    [Display(Name="年齢")]
    [Range(0, 200, ErrorMessage = "ゼロ以上200以下の値にして下さい。")]
    public int Age { get; set; }
}




リスト5-25
<div asp-validation-summary="All" class="text-danger"></div>




リスト5-26
// using System.Text.RegularExpressions;


public class Person: IValidatableObject
{
    public int PersonId { get; set; }
    [Display(Name="名前")]
    public string Name { get; set; }
    [Display(Name="メールアドレス")]
    public string Mail { get; set; }
    [Display(Name="年齢")]
    public int Age { get; set; }


    public IEnumerable<ValidationResult> 
            Validate(ValidationContext validationContext)
    {
        if (Name == null)
        {
            yield return new ValidationResult
                    ("名前は必須項目です。");
        }
        if (Mail != null && !Regex.IsMatch(Mail, 
                "[a-zA-Z0-9.+-_%]+@[a-zA-Z0-9.-]+"))
        {
            yield return new ValidationResult
                   ("メールアドレスが必要です。");
        }
        if (Age <  0)
        {
            yield return new ValidationResult
                    ("年齢はマイナスにはできません。");
        }
    }
}




リスト5-27
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;


namespace SampleRazorApp.Models
{
    public class Message
    {
        public int MessageId { get; set; }
        [Display(Name="名前")]
        [Required]
        public string Comment { get; set; }
        [Display(Name="投稿者")]
        public int PersonId { get; set; } // ☆
        public Person Person { get; set; } // ☆
    }
}




リスト5-28
// using System.ComponentModel.DataAnnotations.Schema; 追加


public class Message
{
    public int MessageId { get; set; }


    [Display(Name="名前")]
    [Required]
    public string Comment { get; set; }


    [Display(Name="投稿者")]
    public int PersonKey { get; set; } 


    [ForeignKey("PersonKey")]
    public Person Person { get; set; }
}




リスト5-29
public class Person
{
    public int PersonId { get; set; }


    [Display(Name="名前")]
    [Required(ErrorMessage = "必須項目です。")]
    public string Name { get; set; }


    [Display(Name="メールアドレス")]
    [EmailAddress(ErrorMessage = "メールアドレスが必要です。")]
    public string Mail { get; set; }


    [Display(Name="年齢")]
    [Required(ErrorMessage = "必須項目です。")]
    [Range(0, 200, ErrorMessage = "ゼロ以上200以下の値にして下さい。")]
    public int Age { get; set; }


    [Display(Name = "投稿")]
    public ICollection<Message> Messages { get; set; } // ☆
}




リスト5-30
CREATE TABLE "Message" (
        "MessageId"        INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
        "Comment"        TEXT,
        "PersonId"        INTEGER NOT NULL,
)




リスト5-31
public class SampleRazorAppContext : DbContext
{
    public SampleRazorAppContext (DbContextOptions
            <SampleRazorAppContext> options)
            : base(options)
    {
    }


    public DbSet<SampleRazorApp.Models.Person> 
            Person { get; set; }


    public DbSet<SampleRazorApp.Models.Message> 
            Message { get; set; }
}




リスト5-32
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using SampleRazorApp.Models;


namespace SampleRazorApp.Pages.Msg
{
    public class IndexModel : PageModel
    {
        private readonly SampleRazorAppContext _context;


        public IndexModel(SampleRazorAppContext context)
        {
            _context = context;
        }


        public IList<Message> Message { get;set; }


        public async Task OnGetAsync()
        {
            Message = await _context.Message
                .Include(m => m.Person).ToListAsync();
        }
    }
}




リスト5-33
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Message[0].Comment)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Message[0].Person)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Message) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Comment)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Person.Name)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.MessageId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.MessageId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.MessageId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>




リスト5-34
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using SampleRazorApp.Models;


namespace SampleRazorApp.Pages.Msg
{
    public class CreateModel : PageModel
    {
        private readonly SampleRazorAppContext _context;


        public CreateModel(SampleRazorAppContext context)
        {
            _context = context;
        }


        public IActionResult OnGet()
        {
            ViewData["PersonId"] = new SelectList(_context.Person, 
                    "PersonId", "Name");
            return Page();
        }


        [BindProperty]
        public Message Message { get; set; }


        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }


            _context.Message.Add(Message);
            await _context.SaveChangesAsync();


            return RedirectToPage("./Index");
        }
    }
}




リスト5-35
<form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Message.Comment" class="control-label"></label>
        <input asp-for="Message.Comment" class="form-control" />
        <span asp-validation-for="Message.Comment" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Message.PersonId" class="control-label"></label>
        <select asp-for="Message.PersonId" class ="form-control" 
                asp-items="ViewBag.PersonId"></select>
    </div>
    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>




リスト5-36
public async Task OnGetAsync()
{
    Person = await _context.Person.Include("Messages").ToListAsync();
}




リスト5-37
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Person[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Person[0].Mail)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Person[0].Age)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Person[0].Messages)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.Person) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Mail)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            <td>
                <ul>
                    @if (item.Messages.Count > 0)
                    {
                        @foreach (var msg in item.Messages)
                        {
                            <li>@msg.Comment</li>
                        }
                    }
                    else
                    {
                        <li>no-message.</li>
                    }
                </ul>
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.PersonId">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.PersonId">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.PersonId">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>




リスト5-38
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.Entity<Message>().Property<string>("Posted");
}




リスト5-39
public async Task<IActionResult> OnPostAsync()
{
    if (!ModelState.IsValid)
    {
        return Page();
    }
    _context.Entry(Message).Property("Posted").CurrentValue
            = DateTime.Now.ToString();
    _context.Message.Add(Message);
    await _context.SaveChangesAsync();


    return RedirectToPage("./Index");
}




リスト5-40
public readonly SampleRazorAppContext _context;




リスト5-41
(@Model._context.Entry(item).Property("Posted").CurrentValue)
